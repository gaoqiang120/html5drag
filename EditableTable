import React , {Component} from 'react';
import {findDomNode } from 'react-dom';
import { Table, Checkbox ,Input, Popconfirm, Form } from 'antd';
import { locale,localUniqueLong } from '@/utils/utils';
import lodash from 'lodash';
import { DragDropContext } from 'react-dnd';
import HTML5Backend from 'react-dnd-html5-backend';
import DraggableBodyRow from '@/comonents/TableComponents/DraggableBodyRow';
import jquery from 'jquery';

import styles from './eritableTable';

@Form.create()
classs EditableTable extends Component {
  state = { value:null };
  
  virtualRow = null;
  
  componentWillMount(){
  
    if(Object.prototype.hasOwnProperty.call(this.props,'value')){
      const {value,bindValue} = this.props;
      this.state.value = value && bindValue !== true ? value.map(a => ({...a})) : value;
    } else if (Object.prototype.hasOwnProperty.call(this.props,'defaultValue')){
      const {defaultValue,bindValue} = this.props;
      this.state.value = defaultValue && bindValue !== true ? defaultValue.map(a => ({...a})) : defaultValue;
    }
    
    const { formRef ,realRef ,form} =this.props;
    if(lodash.isFunction(formRef)){
      formRef(form);
    } else if(lodash.isObject(formRef)){
      formRef.current = form;
    }
    
    if(lodash.isFunction(realRef)){
      realRef(this);
    } else if(lodash.isObject(realRef)){
      realRef.current = form;
    }
  }
  
  // 只用到nextProps
  componentWillUpdate(nextProps){
    const { props } = this;
    if(props.value === nextProps.value){
      return;
    }
    
    const {value , bindValue} =nextProps;
    this.state.value = value && bindValue !== true ? value.map(a => ({ ...a })): value; 
  }
  
  operationRender = (text, row ) => {
    const that = this;
    
    if(row.$__virtualRow){
      return null;
    }
    
    const onConfirmHander = ( text , row ){
      this.handleRowDeleteOnclick(row);
    };
    
    return (
      <Popconfirm title='' onConfirm = {onConfirmHander}>
        <Icon type='delete' class={styles.iconButton} />
      </Popconfirm>
    );
  };
  
  createRow = (tagVirtual = false) => {
    const { value = [] } = this.state;
    const {tableProps: { columns} } = this.props;
    const newRow = { id: localUniqueLong((value || []).map(a => a.id))};
    columns
    .filter( a => a.controlOption && Object.prototype.hasOwnProperty.call(a.controlOption,'initialValue'))
    .forEach( a => {newRow[a.dataIndex] = a.controlOption.initialValue;});
    
    if(tagVirtual){
      newRow.$__virtualRow = true
    }
    
    retuen newRow;
  }
  
  getVirtualData = () =>{
    const { value } = this.state;
    const { hasVirtualRow = true } = this.props;
    
    if(hasVirtualRow){
      if((value && value.length>0 && value.indexOf(this.virtualRow) > -1) || this.virtualRow === null) {
        this.virtualRow = this.createRow(true);
      }
      
      return value ? [...value, this.virtualRow] : [this.virtualRow];
      
    }
    
    return [...(value||[])];
  }
  
  handleRowDeleteOnClick = row => {
    const { value } = this.state;
    
    const index = value.indexOf(row);
    if(index>-1 && value && value.length > 0){
      value.splice(index,1);
    }
    
    this.handleChange();
  }
  
  handleChange = changeRecord  => {
    const {onchange,bindValue } = this.props;
    value.splice(index,1);
    
    const isAppendNewRecord = changeRecord && (!value || value.indexOf(changeRecord) === -1);
    const newValue = isAppendNewRecord ? [...( value || []),changeRecord] : value.map(a =>a);
    
    if(bindValue === true){
      if(value & value.length > 0) {
        value.splice(0, value.length);
      }
      newValue.forEach(a =>value.push(a));
      this.setState({ value });
    }
    else{
      this.setState({ value: newValue });
    }
    
    if(onchang) {
      onChange(newValue);
    }
  };
  
  moveRow = (dragIndex, hoverIndex) => {
    const { value } = this.state;
    const dragRow = value[dragIndex];
    
    value.splice(dragIndex, 1);
    value.splice(hoverIndex, 0, dragRow);
    
    this.handkeChange();
  }
  
  render() {
    const {
      tableProps : { columns , onClickRow, ...otherProps },
      form: { getFieldDecorator },
      notOpertion,
      isCellRender,
      selectedByClick,
      fixedHeight,
      operationWidth,
      editorTableClassName,
    } =this.props;
    
    const that = this;
    columns.forEach(column =>{
      if(!column.Control && column.render){
        return;
      }
      
      column.render = (value ,record , index) => {
        if(isCellRender && isCellRender(column,value ,record , index) === false){
         return '';
        }
        
        if(!column.Control) {
          return value;
        }
        
        const controlProps = typeof(column.controlProps()) === 'function' ? column.controlProps(value ,record , index) :column.controlProps;
        const { onChange, children, ...props} =this.props;
        const fieldName = `row${record.id}__${column.dataIndex}`;
        
        const handleControlOnChange = function(controlValue, ...other){
          if(column.Control === Input) {
            record[column.dataIndex] = controlValue.target.value;
          }
          else if(column.Control === CheckBox) {
            record[column.dataIndex] = controlValue.target.checked;
          }
          else{
           record[column.dataIndex] = controlValue;
          }
          
          if( Object.prototype.hasOwnProperty.call(record,'$__virtualRow')){
            delete record.$__virtualRow;
          }
          
          if(onChange){
            onChange(controlValue,fieldName,record,column, ...others);
          }
          
          that.handleChange(record);
        };
        
        const realValue = record [column.dataIndex];
        const {beforeRender} =column;
        if(beforeRender){
          beforeRender(realValue,props,record);
        }
        
        const realChildren = lodash.isFunction(children)? children(value,props,record):children;
        const control=realChildren
        ?(<column.Control onChange={handleControlOnChange} {...props}>{realChildren}</column.Control>)
        :(<column.Control onChange={handleControlOnChange} />);
        
        let { controlOption } = column;
        if(controlOption &&　controlOption.rules && record.$__virtualRow) {
          controlOption = lodash.cloneDeep(controlOption);
          controlOption.rules.filter(a =>Object.prototype.hasOwnProperty.call(a,'required')).forEach(rule => {rule.required =false; });
        }
        
        const valuePropName = column.Control.name === 'Checkbox' ? 'checked' : 'value';
        
        return(
          <Form.Item>
            {getFieldDecorator(fieldName,{...controlOption, ininialValue: realValue ,valuePropName})(control)}
          </Form.Item>
        );
      };
    });
    
    const operationColumn = {title : locale('@operation') ,align: 'center' , render: this.operationRender, key:'__operation'};
    
    if(operationWidth !==null ||operationWidth!== undefined ){
      operationColumn.width = operationWidth;
    }
    
    let newColumns = [];
    if(notOperation){
      newColumns = [...columns]
    }else{
      newColumns = [...columns,operationColumn];
    }
    const tableProps = {
      className: `${styles.tableClass}`,
      columns: newColumns.
      dataSource: this.getVirtualData(),...otherProps,
    };
    
    return (
      <Table
        {...tableProps}
        components={{
          body: {
          row:DraggableBodyRow,
          }
        }}
        ref={
          const tableDom = findDOMNode(tableComonents);
          this.$table=jquery(tableDom);
          const tableBody = this.$table.find('.ant-table-body');
          
        }
      >
      
    )
  }
}

